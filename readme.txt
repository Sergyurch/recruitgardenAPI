Налаштування.
Для розгортання API на робочій машині мають бути:
- веб-сервер (наприклад, Apache або Nginx)
- PHP (має бути ввімкнений модуль для роботи з PostgreSQL)
- PostgreSQL
- Composer

1. Створіть базу даних
    CREATE DATABASE your_database_name;
2. Створіть таблицю farm_products
    CREATE TABLE products (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        quantity INT NOT NULL CHECK (quantity >= 0),
        price NUMERIC(10, 2) NOT NULL CHECK (price >= 0)
    );
3. У кореневому каталозі API створіть .env файл та пропишіть у ньому дані для підключення до бази даних (приклад файлу додається)
    DB_HOST=localhost
    DB_PORT=5432
    DB_NAME=farm_products
    DB_USER=your_user
    DB_PASSWORD=your_password
4. Запустіть команду composer install. Composer завантажить необхідні пакети для роботи, прописані у файлі composer.json.
    Зараз у цьому файлі пакет, який допоже отримати змінні оточення, прописані у файлі .env, щоб їх можна було брати із суперглобального масиву $_ENV.
    Також у composer.json прописане правило автозавантаження наших класів з простору імен FarmAPI.
5. У налаштуваннях веб-серверу кореневою папкою для нашого API потрібно прописати папку public.


Особливості роботи з API.
Застосунок приймає запити та відправляє відповіді з тілом у форматі JSON. Заголовок запиту Content-Type має бути application/json.


Інформація по відправці запитів.
Отримати усі продукти
    URI: /products
    метод: GET
    результат: список продуктів, пустий масив або помилка
Отримати усі продукти з фільтром по імені
    URI: /products?name=<part_of_product_name>
    метод: GET
    результат: список продуктів, пустий масив або помилка
Отримати продукт по id
    URI: /products/<id>
    метод: GET
    результат: продукт або помилка
Додати новий продукти
    URI: /products
    метод: POST
    приклад даних для відправки: 
        {
            "name": "Product",
            "quantity": 2,
            "price": 25.50
        }
    результат: створений продукт або помилка
Змінити існуючий продукт (якщо частково, то передати потрібно лише необхідний параметр)
    URI: /products/<id>
    метод: PATCH
    приклад даних для відправки: 
        {
            "name": "Product"
        }
    результат: оновлений продукт або помилка
Видалити продукт по id
    URI: /products/<id>
    метод: DELETE
    результат: кількість видалених записів або помилка